/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type CoinStruct = { denom: string; amount: BigNumberish };

export type CoinStructOutput = [denom: string, amount: bigint] & {
  denom: string;
  amount: bigint;
};

export type ICS20AllocationStruct = {
  sourcePort: string;
  sourceChannel: string;
  spendLimit: CoinStruct[];
  allowList: string[];
};

export type ICS20AllocationStructOutput = [
  sourcePort: string,
  sourceChannel: string,
  spendLimit: CoinStructOutput[],
  allowList: string[]
] & {
  sourcePort: string;
  sourceChannel: string;
  spendLimit: CoinStructOutput[];
  allowList: string[];
};

export type DenomTraceStruct = { path: string; baseDenom: string };

export type DenomTraceStructOutput = [path: string, baseDenom: string] & {
  path: string;
  baseDenom: string;
};

export type PageRequestStruct = {
  key: BytesLike;
  offset: BigNumberish;
  limit: BigNumberish;
  countTotal: boolean;
  reverse: boolean;
};

export type PageRequestStructOutput = [
  key: string,
  offset: bigint,
  limit: bigint,
  countTotal: boolean,
  reverse: boolean
] & {
  key: string;
  offset: bigint;
  limit: bigint;
  countTotal: boolean;
  reverse: boolean;
};

export type PageResponseStruct = { nextKey: BytesLike; total: BigNumberish };

export type PageResponseStructOutput = [nextKey: string, total: bigint] & {
  nextKey: string;
  total: bigint;
};

export type HeightStruct = {
  revisionNumber: BigNumberish;
  revisionHeight: BigNumberish;
};

export type HeightStructOutput = [
  revisionNumber: bigint,
  revisionHeight: bigint
] & { revisionNumber: bigint; revisionHeight: bigint };

export interface ICS20IInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "decreaseAllowance"
      | "denomHash"
      | "denomTrace"
      | "denomTraces"
      | "increaseAllowance"
      | "revoke"
      | "transfer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "IBCTransfer" | "IBCTransferAuthorization"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, ICS20AllocationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "denomHash", values: [string]): string;
  encodeFunctionData(functionFragment: "denomTrace", values: [string]): string;
  encodeFunctionData(
    functionFragment: "denomTraces",
    values: [PageRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      string,
      string,
      string,
      BigNumberish,
      AddressLike,
      string,
      HeightStruct,
      BigNumberish,
      string
    ]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "denomHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "denomTrace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "denomTraces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
}

export namespace IBCTransferEvent {
  export type InputTuple = [
    sender: AddressLike,
    receiver: string,
    sourcePort: string,
    sourceChannel: string,
    denom: string,
    amount: BigNumberish,
    memo: string
  ];
  export type OutputTuple = [
    sender: string,
    receiver: string,
    sourcePort: string,
    sourceChannel: string,
    denom: string,
    amount: bigint,
    memo: string
  ];
  export interface OutputObject {
    sender: string;
    receiver: string;
    sourcePort: string;
    sourceChannel: string;
    denom: string;
    amount: bigint;
    memo: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IBCTransferAuthorizationEvent {
  export type InputTuple = [
    grantee: AddressLike,
    granter: AddressLike,
    allocations: ICS20AllocationStruct[]
  ];
  export type OutputTuple = [
    grantee: string,
    granter: string,
    allocations: ICS20AllocationStructOutput[]
  ];
  export interface OutputObject {
    grantee: string;
    granter: string;
    allocations: ICS20AllocationStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICS20I extends BaseContract {
  connect(runner?: ContractRunner | null): ICS20I;
  waitForDeployment(): Promise<this>;

  interface: ICS20IInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [grantee: AddressLike, granter: AddressLike],
    [ICS20AllocationStructOutput[]],
    "view"
  >;

  approve: TypedContractMethod<
    [grantee: AddressLike, allocations: ICS20AllocationStruct[]],
    [boolean],
    "nonpayable"
  >;

  decreaseAllowance: TypedContractMethod<
    [
      grantee: AddressLike,
      sourcePort: string,
      sourceChannel: string,
      denom: string,
      amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  denomHash: TypedContractMethod<[trace: string], [string], "view">;

  denomTrace: TypedContractMethod<
    [hash: string],
    [DenomTraceStructOutput],
    "view"
  >;

  denomTraces: TypedContractMethod<
    [pageRequest: PageRequestStruct],
    [
      [DenomTraceStructOutput[], PageResponseStructOutput] & {
        denomTraces: DenomTraceStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [
      grantee: AddressLike,
      sourcePort: string,
      sourceChannel: string,
      denom: string,
      amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  revoke: TypedContractMethod<[grantee: AddressLike], [boolean], "nonpayable">;

  transfer: TypedContractMethod<
    [
      sourcePort: string,
      sourceChannel: string,
      denom: string,
      amount: BigNumberish,
      sender: AddressLike,
      receiver: string,
      timeoutHeight: HeightStruct,
      timeoutTimestamp: BigNumberish,
      memo: string
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [grantee: AddressLike, granter: AddressLike],
    [ICS20AllocationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [grantee: AddressLike, allocations: ICS20AllocationStruct[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [
      grantee: AddressLike,
      sourcePort: string,
      sourceChannel: string,
      denom: string,
      amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "denomHash"
  ): TypedContractMethod<[trace: string], [string], "view">;
  getFunction(
    nameOrSignature: "denomTrace"
  ): TypedContractMethod<[hash: string], [DenomTraceStructOutput], "view">;
  getFunction(
    nameOrSignature: "denomTraces"
  ): TypedContractMethod<
    [pageRequest: PageRequestStruct],
    [
      [DenomTraceStructOutput[], PageResponseStructOutput] & {
        denomTraces: DenomTraceStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [
      grantee: AddressLike,
      sourcePort: string,
      sourceChannel: string,
      denom: string,
      amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<[grantee: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [
      sourcePort: string,
      sourceChannel: string,
      denom: string,
      amount: BigNumberish,
      sender: AddressLike,
      receiver: string,
      timeoutHeight: HeightStruct,
      timeoutTimestamp: BigNumberish,
      memo: string
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "IBCTransfer"
  ): TypedContractEvent<
    IBCTransferEvent.InputTuple,
    IBCTransferEvent.OutputTuple,
    IBCTransferEvent.OutputObject
  >;
  getEvent(
    key: "IBCTransferAuthorization"
  ): TypedContractEvent<
    IBCTransferAuthorizationEvent.InputTuple,
    IBCTransferAuthorizationEvent.OutputTuple,
    IBCTransferAuthorizationEvent.OutputObject
  >;

  filters: {
    "IBCTransfer(address,string,string,string,string,uint256,string)": TypedContractEvent<
      IBCTransferEvent.InputTuple,
      IBCTransferEvent.OutputTuple,
      IBCTransferEvent.OutputObject
    >;
    IBCTransfer: TypedContractEvent<
      IBCTransferEvent.InputTuple,
      IBCTransferEvent.OutputTuple,
      IBCTransferEvent.OutputObject
    >;

    "IBCTransferAuthorization(address,address,tuple[])": TypedContractEvent<
      IBCTransferAuthorizationEvent.InputTuple,
      IBCTransferAuthorizationEvent.OutputTuple,
      IBCTransferAuthorizationEvent.OutputObject
    >;
    IBCTransferAuthorization: TypedContractEvent<
      IBCTransferAuthorizationEvent.InputTuple,
      IBCTransferAuthorizationEvent.OutputTuple,
      IBCTransferAuthorizationEvent.OutputObject
    >;
  };
}
